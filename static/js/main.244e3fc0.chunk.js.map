{"version":3,"sources":["Components/Calculate.jsx","Components/KeyPad.jsx","Components/Output.jsx","App.js","serviceWorker.js","index.js"],"names":["Calculate","props","buttonPressed","buttonName","state","result","length","limitExceeded","reset","calculate","backspace","squared","root","setState","eval","e","lastDigit","slice","Math","sqrt","className","this","React","Component","KeyPad","target","name","onClick","id","Output","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2mCAIMA,U,sYACJ,mBAAYC,OAAQ,IAAD,8LACjB,uBAAMA,OADW,MASnBC,cAAgB,SAACC,GACX,MAAKC,MAAMC,OAAOC,OAAS,GAC7B,MAAKC,gBACmB,MAAfJ,EACT,MAAKK,QACmB,MAAfL,EACT,MAAKM,YACmB,OAAfN,EACT,MAAKO,YACmB,UAAfP,EACT,MAAKQ,UACmB,WAAfR,EACT,MAAKS,OAEL,MAAKC,SAAS,CACZR,OAAQ,MAAKD,MAAMC,OAASF,KAxBf,MA8BnBM,UAAY,WACV,IACE,MAAKI,SAAS,CACZR,OAAQS,KAAK,MAAKV,MAAMC,UAE1B,MAAOU,GACP,MAAKF,SAAS,CACZR,OAAQ,YArCK,MA2CnBG,MAAQ,WACN,MAAKK,SAAS,CACZR,OAAQ,MA7CO,MAkDnBK,UAAY,WACV,IAAIM,EAAY,MAAKZ,MAAMC,OAAOY,MAAM,GAAI,GAC5C,MAAKJ,SAAS,CACZR,OAAQW,KArDO,MA0DnBT,cAAgB,WACd,MAAKM,SAAS,CACZR,OAAQ,MA5DO,MAiEnBM,QAAU,WACR,MAAKE,SAAS,CACZR,OAAQ,MAAKD,MAAMC,OAAS,MAAKD,MAAMC,UAnExB,MAwEnBO,KAAO,WACL,MAAKC,SAAS,CACZR,OAAQa,KAAKC,KAAK,MAAKf,MAAMC,WAvE/B,MAAKD,MAAQ,CACXC,OAAQ,IAJO,M,+MA+EjB,OACE,kEAAKe,UAAU,aACb,2DAAC,uCAAD,CAAQf,OAAQgB,KAAKjB,MAAMC,SAC3B,2DAAC,uCAAD,CAAQH,cAAemB,KAAKnB,qB,WAnFZoB,6CAAMC,WAyFfvB,iC,6EC3FTwB,E,4MAEJtB,cAAgB,SAACa,GACf,EAAKd,MAAMC,cAAca,EAAEU,OAAOC,O,uDAIlC,OACE,yBAAKN,UAAU,WACb,4BAAQM,KAAK,IAAIC,QAASN,KAAKnB,eAA/B,KAGA,4BAAQ0B,GAAG,QAAQF,KAAK,IAAIC,QAASN,KAAKnB,eAA1C,KAGA,4BAAQ0B,GAAG,YAAYF,KAAK,KAAKC,QAASN,KAAKnB,eAA/C,MAGA,4BAAQwB,KAAK,IAAIC,QAASN,KAAKnB,eAA/B,KAGA,4BAAQwB,KAAK,IAAIC,QAASN,KAAKnB,eAA/B,KAGA,4BAAQwB,KAAK,IAAIC,QAASN,KAAKnB,eAA/B,KAGA,4BAAQwB,KAAK,IAAIC,QAASN,KAAKnB,eAA/B,KAGA,4BAAQ0B,GAAG,QAAQF,KAAK,IAAIC,QAASN,KAAKnB,eAA1C,KAGA,4BAAQwB,KAAK,IAAIC,QAASN,KAAKnB,eAA/B,KAGA,4BAAQwB,KAAK,IAAIC,QAASN,KAAKnB,eAA/B,KAGA,4BAAQwB,KAAK,IAAIC,QAASN,KAAKnB,eAA/B,KAGA,4BAAQ0B,GAAG,QAAQF,KAAK,IAAIC,QAASN,KAAKnB,eAA1C,KAGA,4BAAQwB,KAAK,IAAIC,QAASN,KAAKnB,eAA/B,KAGA,4BAAQwB,KAAK,IAAIC,QAASN,KAAKnB,eAA/B,KAGA,4BAAQwB,KAAK,IAAIC,QAASN,KAAKnB,eAA/B,KAGA,4BAAQ0B,GAAG,QAAQF,KAAK,IAAIC,QAASN,KAAKnB,eAA1C,KAGA,4BAAQ0B,GAAG,OAAOF,KAAK,IAAIC,QAASN,KAAKnB,eAAzC,KAGA,4BAAQwB,KAAK,IAAIC,QAASN,KAAKnB,eAA/B,KAGA,4BAAQ0B,GAAG,OAAOF,KAAK,IAAIC,QAASN,KAAKnB,eAAzC,KAGA,4BAAQ0B,GAAG,QAAQF,KAAK,IAAIC,QAASN,KAAKnB,eAA1C,KAGA,4BAAQ0B,GAAG,QAAQF,KAAK,QAAKC,QAASN,KAAKnB,eAA3C,SAGA,4BAAQ0B,GAAG,QAAQF,KAAK,SAAIC,QAASN,KAAKnB,eAA1C,UAGA,4BAAQ0B,GAAG,QAAQF,KAAK,IAAIC,QAASN,KAAKnB,eAA1C,U,GA3EaoB,IAAMC,WAmFZC,O,+GCnFMK,E,uKAEjB,OACE,yBAAKT,UAAU,UACb,2BAAIC,KAAKpB,MAAMI,a,GAJaiB,IAAMC,Y,oMCY3BO,E,uKARX,OACE,yBAAKV,UAAU,OACb,kBAACpB,EAAA,EAAD,W,GAJUsB,IAAMC,WCQJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.244e3fc0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport KeyPad from \"./KeyPad\";\r\nimport Output from \"./Output\";\r\n\r\nclass Calculate extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      result: \"\",\r\n    };\r\n  }\r\n\r\n  // Checks what button is pressed and call a method depending on the button\r\n  buttonPressed = (buttonName) => {\r\n    if (this.state.result.length > 12) {\r\n      this.limitExceeded();\r\n    } else if (buttonName === \"C\") {\r\n      this.reset();\r\n    } else if (buttonName === \"=\") {\r\n      this.calculate();\r\n    } else if (buttonName === \"CE\") {\r\n      this.backspace();\r\n    } else if (buttonName === \"x²\") {\r\n      this.squared();\r\n    } else if (buttonName === \"√\") {\r\n      this.root();\r\n    } else {\r\n      this.setState({\r\n        result: this.state.result + buttonName,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Calculates the result stored in state\r\n  calculate = () => {\r\n    try {\r\n      this.setState({\r\n        result: eval(this.state.result),\r\n      });\r\n    } catch (e) {\r\n      this.setState({\r\n        result: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // Resets the screen\r\n  reset = () => {\r\n    this.setState({\r\n      result: \"\",\r\n    });\r\n  };\r\n\r\n  // Deletes the last number\r\n  backspace = () => {\r\n    let lastDigit = this.state.result.slice(0, -1);\r\n    this.setState({\r\n      result: lastDigit,\r\n    });\r\n  };\r\n\r\n  // If the limit is exceeded (which is 12) reset the screen\r\n  limitExceeded = () => {\r\n    this.setState({\r\n      result: \"\",\r\n    });\r\n  };\r\n\r\n  // Squares the number what is entered\r\n  squared = () => {\r\n    this.setState({\r\n      result: this.state.result * this.state.result,\r\n    });\r\n  };\r\n\r\n  // Calculates the root of the number what is entered\r\n  root = () => {\r\n    this.setState({\r\n      result: Math.sqrt(this.state.result),\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"calc-body\">\r\n        <Output result={this.state.result} />\r\n        <KeyPad buttonPressed={this.buttonPressed} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculate;\r\n","import React from \"react\";\r\n\r\nclass KeyPad extends React.Component {\r\n  // Gets the name of the button which is pressed\r\n  buttonPressed = (e) => {\r\n    this.props.buttonPressed(e.target.name);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"buttons\">\r\n        <button name=\"(\" onClick={this.buttonPressed}>\r\n          (\r\n        </button>\r\n        <button id=\"reset\" name=\"C\" onClick={this.buttonPressed}>\r\n          C\r\n        </button>\r\n        <button id=\"backspace\" name=\"CE\" onClick={this.buttonPressed}>\r\n          CE\r\n        </button>\r\n        <button name=\")\" onClick={this.buttonPressed}>\r\n          )\r\n        </button>\r\n        <button name=\"1\" onClick={this.buttonPressed}>\r\n          1\r\n        </button>\r\n        <button name=\"2\" onClick={this.buttonPressed}>\r\n          2\r\n        </button>\r\n        <button name=\"3\" onClick={this.buttonPressed}>\r\n          3\r\n        </button>\r\n        <button id=\"modes\" name=\"+\" onClick={this.buttonPressed}>\r\n          +\r\n        </button>\r\n        <button name=\"4\" onClick={this.buttonPressed}>\r\n          4\r\n        </button>\r\n        <button name=\"5\" onClick={this.buttonPressed}>\r\n          5\r\n        </button>\r\n        <button name=\"6\" onClick={this.buttonPressed}>\r\n          6\r\n        </button>\r\n        <button id=\"modes\" name=\"-\" onClick={this.buttonPressed}>\r\n          -\r\n        </button>\r\n        <button name=\"7\" onClick={this.buttonPressed}>\r\n          7\r\n        </button>\r\n        <button name=\"8\" onClick={this.buttonPressed}>\r\n          8\r\n        </button>\r\n        <button name=\"9\" onClick={this.buttonPressed}>\r\n          9\r\n        </button>\r\n        <button id=\"modes\" name=\"*\" onClick={this.buttonPressed}>\r\n          *\r\n        </button>\r\n        <button id=\"zero\" name=\"0\" onClick={this.buttonPressed}>\r\n          0\r\n        </button>\r\n        <button name=\".\" onClick={this.buttonPressed}>\r\n          .\r\n        </button>\r\n        <button id=\"bttn\" name=\"=\" onClick={this.buttonPressed}>\r\n          =\r\n        </button>\r\n        <button id=\"modes\" name=\"/\" onClick={this.buttonPressed}>\r\n          /\r\n        </button>\r\n        <button id=\"modes\" name=\"x²\" onClick={this.buttonPressed}>\r\n          x²\r\n        </button>\r\n        <button id=\"modes\" name=\"√\" onClick={this.buttonPressed}>\r\n          √\r\n        </button>\r\n        <button id=\"modes\" name=\"%\" onClick={this.buttonPressed}>\r\n          %\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default KeyPad;\r\n","import React from \"react\";\r\n\r\nexport default class Output extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"result\">\r\n        <p>{this.props.result}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Calculate from \"./Components/Calculate\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Calculate />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}